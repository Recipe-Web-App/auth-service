name: Code Coverage

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  GO_VERSION: '1.24'
  COVERAGE_THRESHOLD: 80

jobs:
  coverage:
    name: Check Code Coverage
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        REDIS_URL: redis://localhost:6379

    - name: Calculate coverage percentage
      id: coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"

    - name: Check coverage threshold
      run: |
        COVERAGE=${{ steps.coverage.outputs.percentage }}
        THRESHOLD=${{ env.COVERAGE_THRESHOLD }}

        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below threshold $THRESHOLD%"
          exit 1
        else
          echo "‚úÖ Coverage $COVERAGE% meets threshold $THRESHOLD%"
        fi

    - name: Generate coverage badge
      uses: jaywcjlove/coverage-badges-cli@main
      with:
        source: coverage.out
        output: coverage.svg

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: coverage
        message: |
          ## üìä Code Coverage Report

          **Coverage:** ${{ steps.coverage.outputs.percentage }}%
          **Threshold:** ${{ env.COVERAGE_THRESHOLD }}%
          **Status:** ${{ steps.coverage.outputs.percentage >= env.COVERAGE_THRESHOLD && '‚úÖ Passed' || '‚ùå Failed' }}

          <details>
          <summary>View detailed coverage</summary>

          ```
          $(go tool cover -func=coverage.out)
          ```

          </details>
