name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        if [[ ${{ steps.get_version.outputs.version }} == v*.*.* ]]; then
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -2 | tail -1)
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi
        else
          CHANGELOG="Pre-release version"
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-and-upload:
    name: Build and Upload
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: write

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
        VERSION: ${{ needs.create-release.outputs.version }}
      run: |
        BINARY_NAME=auth-service
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        ARCHIVE_NAME="auth-service-${VERSION}-${GOOS}-${GOARCH}"

        go build -ldflags="-w -s -X main.version=${VERSION}" -o ${BINARY_NAME} ./cmd/server

        if [ "$GOOS" = "windows" ]; then
          zip "${ARCHIVE_NAME}.zip" ${BINARY_NAME}
        else
          tar -czf "${ARCHIVE_NAME}.tar.gz" ${BINARY_NAME}
        fi

    - name: Upload Linux amd64
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./auth-service-${{ needs.create-release.outputs.version }}-linux-amd64.tar.gz
        asset_name: auth-service-${{ needs.create-release.outputs.version }}-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Linux arm64
      if: matrix.goos == 'linux' && matrix.goarch == 'arm64'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./auth-service-${{ needs.create-release.outputs.version }}-linux-arm64.tar.gz
        asset_name: auth-service-${{ needs.create-release.outputs.version }}-linux-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Darwin amd64
      if: matrix.goos == 'darwin' && matrix.goarch == 'amd64'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./auth-service-${{ needs.create-release.outputs.version }}-darwin-amd64.tar.gz
        asset_name: auth-service-${{ needs.create-release.outputs.version }}-darwin-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Darwin arm64
      if: matrix.goos == 'darwin' && matrix.goarch == 'arm64'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./auth-service-${{ needs.create-release.outputs.version }}-darwin-arm64.tar.gz
        asset_name: auth-service-${{ needs.create-release.outputs.version }}-darwin-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows amd64
      if: matrix.goos == 'windows' && matrix.goarch == 'amd64'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./auth-service-${{ needs.create-release.outputs.version }}-windows-amd64.zip
        asset_name: auth-service-${{ needs.create-release.outputs.version }}-windows-amd64.zip
        asset_content_type: application/zip

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.create-release.outputs.version }}
